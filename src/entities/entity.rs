use super::Vertex;

// use std::time::Instant;
// use chrono::
extern crate nalgebra as na;

pub struct Entity {
    vertices: Vec<Vertex>,
    indices: Vec<u16>,
    transform: na::Matrix5<f32>,
}

impl Entity {
    pub fn simplex() -> Self {
        let vertices = vec![
            Vertex { pos: [-0.5, -0.5, -0.5, -0.5], color: [1.0, 0.0, 0.0] },
            Vertex { pos: [ 0.5, -0.5,  0.5, -0.5], color: [0.0, 1.0, 0.0] },
            Vertex { pos: [-0.5,  0.5,  0.5, -0.5], color: [0.0, 0.0, 1.0] },
            Vertex { pos: [-0.5,  0.5, -0.5,  0.5], color: [1.0, 1.0, 1.0] },
            Vertex { pos: [ 0.5, -0.5, -0.5,  0.5], color: [1.0, 0.0, 0.0] },
        ];

        let indices = vec![
            0, 1, 2,
            0, 1, 3,
            0, 2, 3,
            1, 2, 3,
            
            0, 1, 4,
            0, 2, 4,
            0, 3, 4,
            1, 2, 4,
            1, 3, 4,
            2, 3, 4,
        ];

        let transform = na::Matrix5::identity();

        Self {
            vertices,
            indices,
            transform,
        }
    }

    pub fn hypercube() -> Self {
        // let vertices = vec![
        //     Vertex { pos: [-0.5, -0.5, -0.5, -0.5], color: [1.0, 0.0, 0.0] },
        //     Vertex { pos: [-0.5, -0.5, -0.5,  0.5], color: [0.0, 1.0, 0.0] },
        //     Vertex { pos: [-0.5, -0.5,  0.5, -0.5], color: [0.0, 0.0, 1.0] },
        //     Vertex { pos: [-0.5, -0.5,  0.5,  0.5], color: [1.0, 1.0, 1.0] },
        //     Vertex { pos: [-0.5,  0.5, -0.5, -0.5], color: [1.0, 0.0, 0.0] },
        //     Vertex { pos: [-0.5,  0.5, -0.5,  0.5], color: [0.0, 1.0, 0.0] },
        //     Vertex { pos: [-0.5,  0.5,  0.5, -0.5], color: [0.0, 0.0, 1.0] },
        //     Vertex { pos: [-0.5,  0.5,  0.5,  0.5], color: [1.0, 1.0, 1.0] },
        //     Vertex { pos: [ 0.5, -0.5, -0.5, -0.5], color: [1.0, 0.0, 0.0] },
        //     Vertex { pos: [ 0.5, -0.5, -0.5,  0.5], color: [0.0, 1.0, 0.0] },
        //     Vertex { pos: [ 0.5, -0.5,  0.5, -0.5], color: [0.0, 0.0, 1.0] },
        //     Vertex { pos: [ 0.5, -0.5,  0.5,  0.5], color: [1.0, 1.0, 1.0] },
        //     Vertex { pos: [ 0.5,  0.5, -0.5, -0.5], color: [1.0, 0.0, 0.0] },
        //     Vertex { pos: [ 0.5,  0.5, -0.5,  0.5], color: [0.0, 1.0, 0.0] },
        //     Vertex { pos: [ 0.5,  0.5,  0.5, -0.5], color: [0.0, 0.0, 1.0] },
        //     Vertex { pos: [ 0.5,  0.5,  0.5,  0.5], color: [1.0, 1.0, 1.0] },
        // ];

        let mut vertices = vec![
            Vertex { pos: [-0.5, -0.5, -0.5, -0.5], color: [1.0, 0.0, 0.0] },
            Vertex { pos: [-0.5, -0.5, -0.5,  0.5], color: [0.0, 1.0, 0.0] },
            Vertex { pos: [-0.5, -0.5,  0.5, -0.5], color: [0.0, 0.0, 1.0] },
            Vertex { pos: [-0.5, -0.5,  0.5,  0.5], color: [1.0, 1.0, 1.0] },
            Vertex { pos: [-0.5,  0.5, -0.5, -0.5], color: [1.0, 0.0, 0.0] },
            Vertex { pos: [-0.5,  0.5, -0.5,  0.5], color: [0.0, 1.0, 0.0] },
            Vertex { pos: [-0.5,  0.5,  0.5, -0.5], color: [0.0, 0.0, 1.0] },
            Vertex { pos: [-0.5,  0.5,  0.5,  0.5], color: [1.0, 1.0, 1.0] },
            Vertex { pos: [ 0.5, -0.5, -0.5, -0.5], color: [1.0, 0.0, 0.0] },
            Vertex { pos: [ 0.5, -0.5, -0.5,  0.5], color: [0.0, 1.0, 0.0] },
            Vertex { pos: [ 0.5, -0.5,  0.5, -0.5], color: [0.0, 0.0, 1.0] },
            Vertex { pos: [ 0.5, -0.5,  0.5,  0.5], color: [1.0, 1.0, 1.0] },
            Vertex { pos: [ 0.5,  0.5, -0.5, -0.5], color: [1.0, 0.0, 0.0] },
            Vertex { pos: [ 0.5,  0.5, -0.5,  0.5], color: [0.0, 1.0, 0.0] },
            Vertex { pos: [ 0.5,  0.5,  0.5, -0.5], color: [0.0, 0.0, 1.0] },
            Vertex { pos: [ 0.5,  0.5,  0.5,  0.5], color: [1.0, 1.0, 1.0] },
        ];

        // for v in vertices.iter_mut() {
        //     if v.pos[3] == 0.5 {
        //         v.pos[0] = v.pos[0] * 0.6;
        //         v.pos[1] = v.pos[1] * 0.6;
        //         v.pos[2] = v.pos[2] * 0.6;
        //         v.pos[3] = v.pos[3] * 0.6;
        //     }
        // }

        // let indices = vec![
        //     // z, w
        //     // 0, 1, 2, 3
        //     0, 1, 2,        1, 2, 3, 
        //     // 4, 5, 6, 7
        //     4, 5, 6,        5, 6, 7,
        //     // 8, 9, 10, 11
        //     8, 9, 10,       9, 10, 11,
        //     // 12, 13, 14, 15
        //     12, 13, 14,     13, 14, 15,
            
        //     // y, w
        //     // 0, 1, 4, 5
        //     0, 1, 4,        1, 4, 5,
        //     // 2, 3, 6, 7
        //     2, 3, 6,        3, 6, 7,
        //     // 8, 9, 12, 13
        //     8, 9, 12,       9, 12, 13,
        //     // 10, 11, 14, 15
        //     10, 11, 14,     11, 14, 15,

        //     // x, w
        //     // 0, 1, 8, 9
        //     0, 1, 8,        1, 8, 9,
        //     // 2, 3, 10, 11
        //     2, 3, 10,       3, 10, 11,
        //     // 4, 5, 12, 13
        //     4, 5, 12,       5, 12, 13,
        //     // 6, 7, 14, 15
        //     6, 7, 14,       7, 14, 15,

        //     // y, z
        //     // 0, 2, 4, 6
        //     0, 2, 4,        2, 4, 6,
        //     // 1, 3, 5, 7
        //     1, 3, 5,        3, 5, 7,
        //     // 8, 10, 12, 14
        //     8, 10, 12,      10, 12, 14,
        //     // 9, 11, 13, 15
        //     9, 11, 13,      11, 13, 15,

        //     // x, z
        //     // 0, 2, 8, 10
        //     0, 2, 8,        2, 8, 10,
        //     // 1, 3, 9, 11
        //     1, 3, 9,        3, 9, 11,
        //     // 4, 6, 12, 14
        //     4, 6, 12,       6, 12, 14,
        //     // 5, 7, 13, 15
        //     5, 7, 13,       7, 13, 15,

        //     // x, y
        //     // 0, 4, 8, 12
        //     0, 4, 8,        4, 8, 12,
        //     // 1, 5, 9, 13
        //     1, 5, 9,        5, 9, 13,
        //     // 2, 6, 10, 14
        //     2, 6, 10,       6, 10, 14,
        //     // 3, 7, 11, 15
        //     3, 7, 11,       7, 11, 15,
        // ];

        // let indices = vec![
        //     // z, w
        //     // 0, 1, 2, 3
        //     0, 1, 0,        1, 2, 1,        2, 3, 2,        3, 0, 3,
        //     // 4, 5, 6, 7
        //     4, 5, 4,        5, 6, 5,        6, 7, 6,        7, 4, 7,
        //     // 8, 9, 10, 11
        //     8, 9, 8,        9, 10, 9,       10, 11, 10,     11, 8, 11,
        //     // 12, 13, 14, 15
        //     12, 13, 12,     13, 14, 13,     14, 15, 14,     15, 12, 15,
            
        //     // y, w
        //     // 0, 1, 4, 5
        //     0, 1, 0,        1, 4, 1,        4, 5, 4,        5, 0, 5,
        //     // 2, 3, 6, 7
        //     2, 3, 2,        3, 6, 3,        6, 7, 6,        7, 2, 7,
        //     // 8, 9, 12, 13
        //     8, 9, 8,        9, 12, 9,       12, 13, 12,     13, 8, 13,
        //     // 10, 11, 14, 15
        //     10, 11, 10,     11, 14, 11,     14, 15, 14,     15, 10, 15,

        //     // x, w
        //     // 0, 1, 8, 9
        //     0, 1, 8,        1, 8, 9,
        //     // 2, 3, 10, 11
        //     2, 3, 10,       3, 10, 11,
        //     // 4, 5, 12, 13
        //     4, 5, 12,       5, 12, 13,
        //     // 6, 7, 14, 15
        //     6, 7, 14,       7, 14, 15,

        //     // y, z
        //     // 0, 2, 4, 6
        //     0, 2, 4,        2, 4, 6,
        //     // 1, 3, 5, 7
        //     1, 3, 5,        3, 5, 7,
        //     // 8, 10, 12, 14
        //     8, 10, 12,      10, 12, 14,
        //     // 9, 11, 13, 15
        //     9, 11, 13,      11, 13, 15,

        //     // x, z
        //     // 0, 2, 8, 10
        //     0, 2, 8,        2, 8, 10,
        //     // 1, 3, 9, 11
        //     1, 3, 9,        3, 9, 11,
        //     // 4, 6, 12, 14
        //     4, 6, 12,       6, 12, 14,
        //     // 5, 7, 13, 15
        //     5, 7, 13,       7, 13, 15,

        //     // x, y
        //     // 0, 4, 8, 12
        //     0, 4, 8,        4, 8, 12,
        //     // 1, 5, 9, 13
        //     1, 5, 9,        5, 9, 13,
        //     // 2, 6, 10, 14
        //     2, 6, 10,       6, 10, 14,
        //     // 3, 7, 11, 15
        //     3, 7, 11,       7, 11, 15,
        // ];

        // framework
        let indices = vec!(
            // 0, 1, 0,
            // 0, 2, 0
            0, 1, 0,    0, 2, 0,    0, 4, 0,    0, 8, 0,
            1, 3, 1,    1, 5, 1,    1, 9, 1,
            2, 3, 2,    2, 6, 2,    2, 10, 2,
            3, 7, 3,    3, 11, 3,
            4, 5, 4,    4, 6, 4,    4, 12, 4,
            5, 7, 5,    5, 13, 5,
            6, 7, 6,    6, 14, 6,
            7, 15, 7,
            8, 9, 8,    8, 10, 8,   8, 12, 8,
            9, 11, 9,   9, 13, 9,
            10, 11, 10,     10, 14, 10,
            11, 15, 11,
            12, 13, 12,     12, 14, 12,
            13, 15, 13,
            14, 15, 14,
        );

        let transform = na::Matrix5::identity();

        Self {
            vertices,
            indices,
            transform,
        }
    }

    pub fn vertices(&self) -> Vec<Vertex> {
        self.vertices.clone()
    }

    pub fn indices(&self) -> Vec<u16> {
        self.indices.clone()
    }

    pub fn transform(&self) -> na::Matrix5<f32> {
        self.transform.clone()
    }
}